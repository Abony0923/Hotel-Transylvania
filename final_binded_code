.model small
.stack 100h
.data
    ; System variables
    current_id dw 0    ; Current user ID, increments with each booking
    
    ; Prompts and messages 
    welcome_msg db 'Welcome to Hotel Transylvania$'
    choices db 'What would you like to do?$'
    option1 db '1.Book$'
    user_info_title db '=USER INFORMATION=$' 
    choosing db "choose one:$"
    
    option2 db '2.Login$' 
    user_login_title db '=USER LOGIN=$'
    asking_name db "Name:$"
    asking_id db "ID:$" 
    
    m1 db "What would you like to do now?$"
    m2 db "1.Room service$"
    m3 db "2.Arrange an event$"
    
    m5 db "3.Restaurant reservation$"
    m6 db "4.Drop a review/feedback$" 
    m7 db "5.Cancel your stay with us$"  ; Added '$' terminator
    m8 db "6.Go back$"
    
    
    sure_msg db "Are you sure you want to cancel your stay with us?(Y/N)$"
    cancel_msg db "We're sorry to hear you've canceled your stay. We hope to welcome you another time. Safe travels and best wishes!$"    
    
    
  
    
    
    
        
    prompt_name     db 'Enter name (max 20 chars): $'
    prompt_age      db 13, 10, 'Enter age: $'
    msg_invalid_age db 13, 10, 'Invalid age. Must be 18 or above$'
    prompt_guests   db 13, 10, 'Enter number of guests: $'
    prompt_checkin  db 13, 10, 'Enter check-in date (DD-MM-YY): $'
    prompt_checkout db 13, 10, 'Enter check-out date (DD-MM-YY): $'
    msg_duration    db 13, 10, 'Duration of stay (days): $'
    
    ; Confirmation messages
    msg_confirm     db 13, 10, 'Choose an option: ', 13, 10
                    db '1.Confirm', 13, 10
                    db '2. Cancel', 13, 10, 'Your choice: $'
    msg_invalid_choice db 13, 10, 'Invalid choice. Please try again.$'
    msg_book_room   db 13, 10, 'BOOK room', 13, 10, '$'
    
    ; Floor selection
    msg_floor       db 13, 10, 'Choose a floor:', 13, 10
                    db '1. Ground Floor', 13, 10
                    db '2. First Floor', 13, 10
                    db '3. Second Floor', 13, 10, 'Your choice: $'
                    
    ; Room type selection
    msg_room_type   db 13, 10, 'Choose room type:', 13, 10
                    db '1. Single', 13, 10
                    db '2. Double', 13, 10
                    db '3. Deluxe', 13, 10, 'Your choice: $'
                    
    ; Availability messages
    msg_available   db 13, 10, 'Room is available!$'
    msg_unavailable db 13, 10, 'Sorry, this room is not available.$'
    
    ; Confirmation message
    msg_confirmation db 13, 10, 'Your ID is $'
    msg_thanks       db 'Keep this generated ID as your password for logging in next time. Thank you for choosing us!$'
    
    ; Floor names
    floor_names     db 'Ground$', '1st   $', '2nd   $'
    
    ; Room type names
    type_names      db 'Sin$', 'Dou$', 'Del$'
    
    ; Room availability array (1=available, 0=unavailable)
    ; [ground-single, ground-double, ground-deluxe, 1st-single, 1st-double, 1st-deluxe, 2nd-single, 2nd-double, 2nd-deluxe]
    room_available  db 1, 1, 1, 1, 1, 1, 1, 1, 1
    
    ; Room names (each name is 10 bytes to simplify)
    room_names      db 'Ground-Sin$'
                    db 'Ground-Dou$'
                    db 'Ground-Del$'
                    db '1st-Sin   $'
                    db '1st-Dou   $'
                    db '1st-Del   $'
                    db '2nd-Sin   $'
                    db '2nd-Dou   $'
                    db '2nd-Del   $'
    
    ; Guest information storage (up to 20 guests)
    ; Each entry has: name(21), ID(2), bill(2) = 25 bytes per guest
    guest_data      db 20 dup(25 dup(0))
    
    ; Input buffers
    buffer      db 22        ; First byte is buffer size (20 chars + CR)
                db 0         ; Second byte will store actual length read
                db 22 dup(0) ; Buffer for input
    name_array  db 21 dup('$')  ; 20 chars + '$' terminator
    
    ; Numeric variables
    age         dw 0
    num_guests  dw 0
    floor_choice db 0
    type_choice  db 0
    room_index   db 0
    
    ; Date variables
    checkin_day   db 0
    checkin_month db 0
    checkin_year  db 0
    checkout_day   db 0
    checkout_month db 0
    checkout_year  db 0
    
    ; For numeric input and output
    ten         dw 10        ; For decimal conversion
    temp        dw 0         ; Temporary storage
    num_buffer  db 6 dup('$') ; Buffer for number output
    
    ; Date buffer (DD-MM-YY format = 8 chars)
    date_buffer db 9, 0, 9 dup(0)
    
    ; Days in each month (for simplicity, not accounting for leap years)
    days_in_month db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    
    ; For duration calculation
    duration    dw 0 
    
    
    ;ROOM SERVICE:
    menu db 'Room Service Menu:',13,10
     db '1. Housekeeping Service - 1000 Taka',13,10
     db '2. In-Room Dining        - Varies',13,10
     db '   A. Light Meal Combo    - 500 Taka',13,10
     db '   B. Full Meal Combo     - 1000 Taka',13,10
     db '   C. Premium Dinner      - 1500 Taka',13,10
     db '3. Wellness Services     - 2000 Taka/day',13,10
     db '4. Spa Treatments        - 3000 Taka/hour',13,10,'$'

time_slots db 'Time Slots:',13,10
           db '1. 06:00 AM - 08:00 AM',13,10
           db '2. 09:00 AM - 11:00 AM',13,10
           db '3. 12:00 PM - 02:00 PM',13,10
           db '4. 03:00 PM - 05:00 PM',13,10
           db '5. 06:00 PM - 08:00 PM',13,10,'$'

summary_msg db 13,10,'Booking Cost:',13,10,'$'

input_msg db 'Enter your choice: $'
ask_days db 'How many days for Wellness service? $'
ask_hours db 'How many hours for Spa service? $'
ask_food db 'Select food package [A/B/C]: $'
ask_time db 'Choose time slot (1-5): $'
ask_continue db 13,10,'Need another service? (Y/N): $'

ask_hk_type db 'Choose Housekeeping Type - (N)normal or (D)designated: $'
hk_info db 13,10,'Assigned Housekeeper: Samantha D. | ID: HK302 | Contact: 1234',13,10,'$'

service_counts dw 10,10,10,10

total_cost dw 0
temp_cost dw 0

 ;ARRANGE AN EVENT:
 event db 0Dh,0Ah, "Our available events:", 0Dh,0Ah, "$"
select_event db 0Dh,0Ah, "Select an event (1-6): $"
venue db 0Dh,0Ah, "Available Venues:", 0Dh,0Ah, "$"
select_venue db 0Dh,0Ah, "Select a venue (1-4): $"
theme db 0Dh,0Ah, "Available Themes:", 0Dh,0Ah, "$"
select_theme db 0Dh,0Ah, "Select a theme (1-4): $"
guest db 0Dh,0Ah, "Enter number of guests (10-99): $"
addon db 0Dh,0Ah, "Add-On Services:", 0Dh,0Ah, "$"
addon_menu db "1. Live Music/DJ (10000)", 0Dh,0Ah
           db "2. Photographer/Videographer (17000)", 0Dh,0Ah
           db "3. Catering Package", 0Dh,0Ah, "$"
catering db 0Dh,0Ah, "Select Catering Package: 1. Standard (1500), 2. Premium (2500): $"
another_addon db 0Dh,0Ah, "Do you want another add-on? (Y/N): $"
book_another db 0Dh,0Ah, "Do you want to book another event? (Y/N): $"
total_cost_msg db 0Dh,0Ah, "Final Total Cost: $", "$"

day db 0Dh,0Ah, "Enter event day (DD): $"
month db 0Dh,0Ah, "Enter event month (MM): $"
year db 0Dh,0Ah, "Enter event year (YYYY): $"

events db "1. Wedding Ceremony",0Dh,0Ah
       db "2. Birthday Party",0Dh,0Ah
       db "3. Corporate Seminar",0Dh,0Ah
       db "4. Cultural Night",0Dh,0Ah
       db "5. Met Gala",0Dh,0Ah
       db "6. Family Get Together",0Dh,0Ah,'$'
event_prices dw 20000, 10000, 12000, 15000, 14000, 8000

venues db "1. Banquet Hall",0Dh,0Ah
       db "2. Rooftop",0Dh,0Ah
       db "3. Poolside",0Dh,0Ah
       db "4. Garden",0Dh,0Ah,'$'
venue_prices dw 5000, 7000, 8000, 6000

themes db "1. Royal",0Dh,0Ah
       db "2. Garden",0Dh,0Ah
       db "3. Minimalist",0Dh,0Ah
       db "4. Futuristic",0Dh,0Ah,'$'
theme_prices dw 1000, 1500, 1200, 2000

selected_event dw 0
selected_venue dw 0
selected_theme dw 0
guest_count dw 0
total_payment dw 0
grand_total dw 0

event_day dw 0
event_month dw 0
event_year dw 0  

;RESTAURANT RESERVATION:
    ; ----- PROMPTS AND MESSAGES -----
    guest_prompt db 'Enter Guest ID (1-99): $'
    res_prompt db 13,10,'Enter reservation date (DD/MM/YY): $'
    meal_prompt db 13,10,'Choose Meal Time:',13,10,' B - Breakfast (6AM-10AM)',13,10,' L - Lunch (12PM-3PM)',13,10,' D - Dinner (7PM-10PM)',13,10,'Your choice: $'

    cuisine_prompt_b db 13,10,'Choose Breakfast Cuisine:',13,10,' 1. Bengali - 150 Taka',13,10,' 2. English - 200 Taka',13,10,'Your choice: $'
    cuisine_prompt_ld db 13,10,'Choose Cuisine for Lunch/Dinner:',13,10,' 1. Bengali - 300 Taka',13,10,' 2. Chinese - 400 Taka',13,10,' 3. Middle Eastern - 500 Taka',13,10,'Your choice: $'

    person_prompt db 13,10,'Enter number of people: $'
    another_prompt db 13,10,'Reserve another meal for the same day? (Y/N): $'
    add_msg db 13,10,'Meal added to bill.$'
    error_msg db 13,10,'Invalid input!$'
    final_msg db 13,10,'Total bill: $'

    ; ----- STORAGE -----
    res_day db ?
    res_month db ?
    res_year db ?

    guest_id db ?
    meal_type db ?
    cuisine_choice db ?
    num_people db ?
    total_bill dw 0
    input_buf db 3 dup(?)
    
    
    ;review:
        ask_feedback db 'Would you like to provide feedback? (Y/N): $'
    rating_prompt db 13,10,'Please rate your stay (0 to 5): $'
    comment_prompt db 13,10,'Enter your comment: $'
    thank_you_msg db 13,10,'Thank you for your feedback!$'
    invalid_rating_msg db 13,10,'Invalid rating! Please enter a number between 0 and 5.$'
    invalid_input_msg db 13,10,'Invalid input! Please enter Y or N.$'
    feedback_skipped db 13,10,'Feedback skipped.$'
    comment_buffer db 100,?,100 dup(0) ; Buffer for comment
 
    
    
.code
main proc
    mov ax, @data
    mov ds, ax
welcome: 
    
lea dx,welcome_msg
mov ah,9
int 21h
 
mov dl,10
mov ah,2
int 21h
mov dl,13
mov ah,2
int 21h    
    
Home_page:
mov dl,10
mov ah,2
int 21h
mov dl,13
mov ah,2
int 21h

 
lea dx,choices
mov ah,9
int 21h

mov dl,10
mov ah,2
int 21h
mov dl,13
mov ah,2
int 21h

lea dx,option1
mov ah,9
int 21h

mov dl,10
mov ah,2
int 21h
mov dl,13
mov ah,2
int 21h  

lea dx,option2
mov ah,9
int 21h

mov dl,10
mov ah,2
int 21h
mov dl,13
mov ah,2
int 21h

lea dx,choosing
mov ah,9
int 21h

mov ah,1          ; Read character from keyboard
int 21h
mov bl, al        ; Save the input character in BL
mov dl,10
mov ah,2
int 21h
mov dl,13
mov ah,2
int 21h  
 
; Check input and jump to appropriate section
cmp bl,'1'        ; Compare with character '1' (ASCII 49)
je start_booking  ; If input is '1', jump to booking
cmp bl,'2'        ; Compare with character '2' (ASCII 50)
je start_login    ; If input is '2', jump to login

; If input is neither '1' nor '2', display error and go back to home page
lea dx, msg_invalid_choice
mov ah, 9
int 21h
jmp Home_page     ; Invalid choice, go back to home page
    
start_booking:
    ; Clear name array
    lea di, name_array
    mov cx, 21
    mov al, '$'
    rep stosb
    
    ; ---- Name Input ----
    mov ah, 09h
    lea dx, prompt_name
    int 21h
    
    mov ah, 0Ah       ; Function to read string
    lea dx, buffer
    int 21h
    
    ; Transfer name from buffer to name_array
    mov cl, buffer[1]  ; Get actual length
    mov ch, 0          ; Clear CH for CX counter
    cmp cx, 0          ; Check if input is empty
    je input_age       ; If empty, skip transfer
    
    lea si, buffer+2   ; Source: buffer+2 (actual input starts here)
    lea di, name_array ; Destination: name_array
    
    transfer_name:
        mov al, [si]    ; Get character from buffer
        mov [di], al    ; Store in name_array
        inc si
        inc di
        loop transfer_name
    
    ; Add $ terminator
    mov byte ptr [di], '$'
    
    ; ---- Age Input and Validation ----
input_age:
    ; Display prompt
    mov ah, 09h
    lea dx, prompt_age
    int 21h
    
    ; Read age
    call read_number   ; Read age into AX
    mov age, ax        ; Store age
    
    ; Check if age >= 18
    cmp ax, 18
    jae age_valid      ; Jump if above or equal (>=)
    
    ; If we get here, age is less than 18
    ; Display invalid age message
    mov ah, 09h
    lea dx, msg_invalid_age
    int 21h
    
    ; Loop back for new age input
    jmp input_age      ; Ask again
    
age_valid:
    ; ---- Number of Guests Input ----
    mov ah, 09h
    lea dx, prompt_guests
    int 21h
    
    call read_number
    mov num_guests, ax
    
    ; ---- Check-in Date Input ----
input_checkin:
    mov ah, 09h
    lea dx, prompt_checkin
    int 21h
    
    ; Read check-in date (DD-MM-YY)
    mov ah, 0Ah
    lea dx, date_buffer
    int 21h
    
    ; Extract day
    mov al, date_buffer[2]  ; First digit
    sub al, '0'
    mov bl, 10
    mul bl
    mov bl, date_buffer[3]  ; Second digit
    sub bl, '0'
    add al, bl
    mov checkin_day, al
    
    ; Extract month
    mov al, date_buffer[5]  ; First digit
    sub al, '0'
    mov bl, 10
    mul bl
    mov bl, date_buffer[6]  ; Second digit
    sub bl, '0'
    add al, bl
    mov checkin_month, al
    
    ; Extract year
    mov al, date_buffer[8]  ; First digit
    sub al, '0'
    mov bl, 10
    mul bl
    mov bl, date_buffer[9]  ; Second digit
    sub bl, '0'
    add al, bl
    mov checkin_year, al
    
    ; ---- Check-out Date Input ----
input_checkout:
    mov ah, 09h
    lea dx, prompt_checkout
    int 21h
    
    ; Read check-out date (DD-MM-YY)
    mov ah, 0Ah
    lea dx, date_buffer
    int 21h
    
    ; Extract day
    mov al, date_buffer[2]  ; First digit
    sub al, '0'
    mov bl, 10
    mul bl
    mov bl, date_buffer[3]  ; Second digit
    sub bl, '0'
    add al, bl
    mov checkout_day, al
    
    ; Extract month
    mov al, date_buffer[5]  ; First digit
    sub al, '0'
    mov bl, 10
    mul bl
    mov bl, date_buffer[6]  ; Second digit
    sub bl, '0'
    add al, bl
    mov checkout_month, al
    
    ; Extract year
    mov al, date_buffer[8]  ; First digit
    sub al, '0'
    mov bl, 10
    mul bl
    mov bl, date_buffer[9]  ; Second digit
    sub bl, '0'
    add al, bl
    mov checkout_year, al
    
    ; ---- Calculate Duration of Stay ----
    ; This is a simplified calculation assuming dates are in same year
    ; Convert all to days and subtract
    
    ; Convert check-in date to total days
    mov ax, 0
    
    ; Add days from previous months
    mov bx, 0
    mov bl, checkin_month
    dec bl              ; Adjust for zero-based array
    cmp bl, 0
    jl checkin_days_only  ; If month is 1 (bl=0), skip month days
    
    ; Sum days from previous months
checkin_month_loop:
    mov si, bx
    mov dl, days_in_month[si]
    mov dh, 0
    add ax, dx
    dec bx
    jge checkin_month_loop
    
checkin_days_only:
    ; Add days of current month
    mov bl, checkin_day
    mov bh, 0
    add ax, bx
    
    ; Store check-in total days
    mov cx, ax
    
    ; Convert check-out date to total days (same logic)
    mov ax, 0
    
    ; Add days from previous months
    mov bx, 0
    mov bl, checkout_month
    dec bl              ; Adjust for zero-based array
    cmp bl, 0
    jl checkout_days_only
    
checkout_month_loop:
    mov si, bx
    mov dl, days_in_month[si]
    mov dh, 0
    add ax, dx
    dec bx
    jge checkout_month_loop
    
checkout_days_only:
    ; Add days of current month
    mov bl, checkout_day
    mov bh, 0
    add ax, bx
    
    ; Subtract to get duration
    sub ax, cx
    
    ; Handle any year difference (simplified: 365 days per year)
    mov bl, checkout_year
    sub bl, checkin_year
    cmp bl, 0
    jle store_duration
    
    ; Add 365 days for each year difference
    mov cx, 365
year_diff_loop:
    add ax, cx
    dec bl
    jnz year_diff_loop
    
store_duration:
    mov duration, ax
    
    ; Display duration
    mov ah, 09h
    lea dx, msg_duration
    int 21h
    
    mov ax, duration
    call display_number
    
    ; Calculate bill amount (duration * 500)
    mov ax, duration
    mov cx, 500
    mul cx
    
    ; Store bill amount in BX register (as requested)
    ; BX will be used exclusively for bill storage
    mov bx, ax
    
confirm_options:
    ; ---- Show Confirmation Options ----
    mov ah, 09h
    lea dx, msg_confirm
    int 21h
    
    call read_single_digit
    
    cmp al, '1'
    je confirm_booking
    cmp al, '2'
    je home_page    ; Start over if user chooses Cancel
    
    ; Invalid choice, show error message and try again
    mov ah, 09h
    lea dx, msg_invalid_choice
    int 21h
    jmp confirm_options  ; Loop back to show options again
    
confirm_booking:
    ; Show "BOOK room" message
    mov ah, 09h
    lea dx, msg_book_room
    int 21h
    
floor_selection:
    ; ---- Floor Selection ----
    mov ah, 09h
    lea dx, msg_floor
    int 21h
    
    call read_single_digit
    sub al, '0'      ; Convert to number
    
    ; Validate floor choice (1-3)
    cmp al, 1
    jl invalid_floor  ; Invalid, retry
    cmp al, 3
    jg invalid_floor  ; Invalid, retry
    
    mov floor_choice, al
    dec floor_choice    ; Convert to 0-based index
    jmp room_type_selection
    
invalid_floor:
    ; Display invalid choice message
    mov ah, 09h
    lea dx, msg_invalid_choice
    int 21h
    jmp floor_selection
    
room_type_selection:
    ; ---- Room Type Selection ----
    mov ah, 09h
    lea dx, msg_room_type
    int 21h
    
    call read_single_digit
    sub al, '0'      ; Convert to number
    
    ; Validate room type choice (1-3)
    cmp al, 1
    jl invalid_room_type  ; Invalid, retry
    cmp al, 3
    jg invalid_room_type  ; Invalid, retry
    
    mov type_choice, al
    dec type_choice    ; Convert to 0-based index
    jmp check_availability
    
invalid_room_type:
    ; Display invalid choice message
    mov ah, 09h
    lea dx, msg_invalid_choice
    int 21h
    jmp room_type_selection
    
check_availability:
    ; Calculate room index = floor_choice * 3 + type_choice
    mov al, floor_choice
    mov bl, 3
    mul bl
    add al, type_choice
    mov room_index, al    ; Store as 8-bit value
    
    ; Check if room is available
    xor si, si          ; Clear SI
    mov bl, room_index  ; Use BL as index (8-bit)
    xor bh, bh          ; Clear BH to make BX valid for addressing
    
    ; Check availability
    cmp room_available[bx], 1
    je room_is_available
    
    ; Room unavailable
    mov ah, 09h
    lea dx, msg_unavailable
    int 21h
    jmp floor_selection  ; Go back to floor selection
    
room_is_available:
    ; Mark room as unavailable
    mov room_available[bx], 0
    
    ; Increment user ID
    inc current_id
    
    ; Store guest information
    call store_guest_info
    
    ; Show confirmation message
    mov ah, 09h
    lea dx, msg_available
    int 21h
    
    mov ah, 09h
    lea dx, msg_confirmation
    int 21h
    
    mov ax, current_id
    call display_number
    
    mov ah, 09h
    lea dx, msg_thanks
    int 21h
    
    mov dl,10
    mov ah,2
    int 21h
    mov dl,13
    mov ah,2
    int 21h
    
    
    ; Ready for next customer
    jmp Home_page
    
end_program:
    ; Terminate program
    mov ah, 4Ch
    int 21h
    
; ---- Procedure to read a number from keyboard into AX ----
read_number proc
    push bx
    push cx
    push dx
    
    mov bx, 0      ; Initialize result in BX
    
    read_digit:
        mov ah, 01h  ; Read character
        int 21h
        
        cmp al, 13   ; Check for Enter key
        je read_done
        
        cmp al, '0'  ; Check if digit
        jl read_digit
        cmp al, '9'
        jg read_digit
        
        ; Convert ASCII to binary
        sub al, '0'
        
        ; Save digit
        mov cl, al
        mov ch, 0
        
        ; Multiply current result by 10
        mov ax, bx
        mov bx, 10
        mul bx       ; AX = AX * 10
        
        ; Add new digit
        add ax, cx   ; AX = AX + digit
        mov bx, ax   ; BX holds running total
        
        jmp read_digit
        
    read_done:
        mov ax, bx   ; Put final result in AX
        pop dx
        pop cx
        pop bx
        ret
read_number endp

; ---- Procedure to read a single digit ----
read_single_digit proc
    mov ah, 01h  ; Read character
    int 21h
    ret
read_single_digit endp

; ---- Procedure to display a number from AX ----
display_number proc
    push ax
    push bx
    push cx
    push dx
    push si
    
    mov cx, 0      ; Digit counter
    mov bx, 10     ; Divisor
    
    ; Special case for zero
    cmp ax, 0
    jne convert_loop
    mov num_buffer[0], '0'
    mov cx, 1
    jmp prepare_output
    
    convert_loop:
        cmp ax, 0
        je prepare_output
        
        mov dx, 0
        div bx                ; AX = quotient, DX = remainder
        
        add dl, '0'           ; Convert to ASCII
        push dx               ; Save digit
        inc cx                ; Increment counter
        
        jmp convert_loop
        
    prepare_output:
        mov si, 0
        
    output_loop:
        cmp cx, 0
        je finish_output
        
        pop dx                ; Get digit
        mov num_buffer[si], dl
        inc si
        dec cx
        
        jmp output_loop
        
    finish_output:
        mov num_buffer[si], '$'  ; Add string terminator
        
        mov ah, 09h
        lea dx, num_buffer
        int 21h
        
        pop si
        pop dx
        pop cx
        pop bx
        pop ax
        ret
display_number endp  

start_login: 
    ; Login functionality
    mov dl,10
    mov ah,2
    int 21h
    mov dl,13
    mov ah,2
    int 21h

     
    lea dx, asking_id
    mov ah, 9
    int 21h

    mov dl, 10
    mov ah, 2
    int 21h
    mov dl, 13
    mov ah, 2
    int 21h 

    mov ah, 1
    int 21h      ; Read user ID
    
    ; Display user menu after successful login
    mov dl, 10
    mov ah, 2
    int 21h
    mov dl, 13
    mov ah, 2
    int 21h

    lea dx, m1
    mov ah, 9
    int 21h 

    mov dl, 10
    mov ah, 2
    int 21h
    mov dl, 13
    mov ah, 2
    int 21h 

    lea dx, m2
    mov ah, 9
    int 21h 

    mov dl, 10
    mov ah, 2
    int 21h
    mov dl, 13
    mov ah, 2
    int 21h 
    
    
    
    lea dx, m3
    mov ah, 9
    int 21h 

    mov dl, 10
    mov ah, 2
    int 21h
    mov dl, 13
    mov ah, 2
    int 21h 
    
    lea dx, m5
    mov ah, 9
    int 21h 

    mov dl, 10
    mov ah, 2
    int 21h
    mov dl, 13
    mov ah, 2
    int 21h 
    
    lea dx, m6
    mov ah, 9
    int 21h 

    mov dl, 10
    mov ah, 2
    int 21h
    mov dl, 13
    mov ah, 2
    int 21h 
    
    lea dx, m7
    mov ah, 9
    int 21h 

    mov dl, 10
    mov ah, 2
    int 21h
    mov dl, 13
    mov ah, 2
    int 21h 

    lea dx, m8
    mov ah, 9
    int 21h 

    mov dl, 10
    mov ah, 2
    int 21h
    mov dl, 13
    mov ah, 2
    int 21h

    lea dx, choosing
    mov ah, 9
    int 21h 

    mov dl, 10
    mov ah, 2
    int 21h
    mov dl, 13
    mov ah, 2
    int 21h 

    mov ah, 1
    int 21h      ; Read user choice
    mov bl, al   ; Store input in BL
    
    ; Check if user wants to go back to home page
    cmp bl, '7'  ; Compare with character '7' (ASCII 55)
    je Home_page ;  Jump to home page if user chose option 7
    CMP bl,'1'
    je Start_room_service
    cmp bl,'2'
    je Start_arranging_event
    CMP BL,'3'
    je Restaurant_reservation
    cmp bl,'4'
    je feedback 
    cmp bl,'5'
    je cancellation
    cmp bl,'6'
    je home_page
    
    
    
    
    
    

                  
    
    ; Handle other menu options here...
    ; For now, just go back to home page
    jmp Home_page

; ---- Procedure to store guest information ----
cancellation:
MOV DL,13
MOV AH,2
INT 21H
MOV DL,10
INT 21H

lea dx,sure_msg
mov ah,9
int 21h
mov ah,1
int 21h
MOV DL,13
MOV AH,2
INT 21H
MOV DL,10
INT 21H
cmp al,'N'
jmp start_login
cmp al,'n'

lea dx,cancel_msg
mov ah,9
int 21h
MOV DL,13
MOV AH,2
INT 21H
MOV DL,10
INT 21H





feedback:
MOV DL,13
MOV AH,2
INT 21H
MOV DL,10
INT 21H

    ; ------------ Ask for Feedback ------------
    mov ah, 09h
    lea dx, ask_feedback
    int 21h

    ; ------------ Read Feedback Response ------------
    mov ah, 01h
    int 21h
    cmp al, 'Y'
    je GET_RATING
    cmp al, 'y'
    je GET_RATING
    cmp al, 'N'
    je NO_FEEDBACK
    cmp al, 'n'
    je NO_FEEDBACK
    ; Invalid input
    mov ah, 09h
    lea dx, invalid_input_msg
    int 21h
    jmp finish

GET_RATING:
    ; ------------ Prompt for Rating ------------
    mov ah, 09h
    lea dx, rating_prompt
    int 21h

    ; ------------ Read Rating Character ------------
    mov ah, 01h
    int 21h
    sub al, '0'
    cmp al, 0
    jb INVALID_RATING
    cmp al, 5
    ja INVALID_RATING
    ; Rating is valid and stored in AL

    ; ------------ Prompt for Comment ------------
    mov ah, 09h
    lea dx, comment_prompt
    int 21h

    ; ------------ Read Comment String ------------
    lea dx, comment_buffer
    mov ah, 0Ah
    int 21h

    ; ------------ Display Thank You Message ------------
    mov ah, 09h
    lea dx, thank_you_msg
    int 21h
    jmp finish

INVALID_RATING:
    mov ah, 09h
    lea dx, invalid_rating_msg
    int 21h
    jmp finish

NO_FEEDBACK:
    ; ------------ Skip Feedback ------------
    mov ah, 09h
    lea dx, feedback_skipped
    int 21h

finish:
    ; ------------ Terminate Program ------------
      jmp start_login
Restaurant_reservation:
RESERVE_LOOP:

; -------- GET RESERVATION DATE --------
    mov ah, 09h
    lea dx, res_prompt
    int 21h
    call read_date
    mov res_day, al
    mov res_month, ah
    mov res_year, bl

; -------- GET MEAL TIME --------
    mov ah, 09h
    lea dx, meal_prompt
    int 21h
    mov ah, 01h
    int 21h
    mov meal_type, al

    cmp al, 'B'
    je CUISINE_B
    cmp al, 'L'
    je CUISINE_LD
    cmp al, 'D'
    je CUISINE_LD
    jmp INVALID_DATE

CUISINE_B:
    mov ah, 09h
    lea dx, cuisine_prompt_b
    int 21h
    mov ah, 01h
    int 21h
    sub al, '0'
    cmp al, 1
    jb INVALID_DATE
    cmp al, 2
    ja INVALID_DATE
    mov cuisine_choice, al
    jmp GET_PEOPLE

CUISINE_LD:
    mov ah, 09h
    lea dx, cuisine_prompt_ld
    int 21h
    mov ah, 01h
    int 21h
    sub al, '0'
    cmp al, 1
    jb INVALID_DATE
    cmp al, 3
    ja INVALID_DATE
    mov cuisine_choice, al
    jmp GET_PEOPLE

GET_PEOPLE:
    mov ah, 09h
    lea dx, person_prompt
    int 21h
    call read_dig
    mov num_people, al
    call calculate_price

    ; Ask if reserve again
    mov ah, 09h
    lea dx, another_prompt
    int 21h
    mov ah, 01h
    int 21h
    cmp al, 'Y'
    je RESERVE_LOOP

; -------- PRINT FINAL BILL --------
    mov ah, 09h
    lea dx, final_msg
    int 21h
    mov ax, total_bill
    call print_num
    JMP start_login

INVALID_DATE:
    mov ah, 09h
    lea dx, error_msg
    int 21h

DONE:
    mov ax, 4C00h
    int 21h 
    

; -------- SUBROUTINES --------

read_date proc
    call read_two_digit
    mov al, bl
    mov ah, 01h
    int 21h
    call read_two_digit
    mov ah, bl
    mov ah, 01h
    int 21h
    call read_two_digit
    mov bl, bl
    ret
read_date endp

read_two_digit proc
    mov ah, 01h
    int 21h
    sub al, '0'
    mov bh, al
    mov ah, 01h
    int 21h
    sub al, '0'
    mov bl, al
    mov al, bh
    mov ah, 0
    mov cx, 10
    mul cx
    add al, bl
    mov bl, al
    ret
read_two_digit endp

read_dig proc
    mov ah, 01h
    int 21h
    sub al, '0'
    ret
read_dig endp

calculate_price proc
    mov al, meal_type
    cmp al, 'B'
    je CALC_B

; L or D
    cmp cuisine_choice, 1
    je L_BENGALI
    cmp cuisine_choice, 2
    je L_CHINESE
    cmp cuisine_choice, 3
    je L_ME
    jmp DONE

CALC_B:
    cmp cuisine_choice, 1
    je B_BENGALI
    cmp cuisine_choice, 2
    je B_ENGLISH
    jmp DONE

B_BENGALI:
    mov ax, 150
    jmp MULTI
B_ENGLISH:
    mov ax, 200
    jmp MULTI
L_BENGALI:
    mov ax, 300
    jmp MULTI
L_CHINESE:
    mov ax, 400
    jmp MULTI
L_ME:
    mov ax, 500

MULTI:
    mov bl, num_people
    mul bl
    add total_bill, ax
    mov ah, 09h
    lea dx, add_msg
    int 21h
    ret
calculate_price endp

print_num proc
    mov cx, 0
    mov bx, 10
print_loop:
    xor dx, dx
    div bx
    push dx
    inc cx
    cmp ax, 0
    jne print_loop
print_digits:
    pop dx
    add dl, '0'
    mov ah, 02h
    int 21h
    loop print_digits
    ret
print_num endp

Start_arranging_event: 
BookingLoop:
    mov word ptr [total_payment], 0

    ; Show Events
    mov ah, 09h
    lea dx, event
    int 21h
    lea dx, events
    int 21h

    ; Select Event
    mov ah, 09h
    lea dx, select_event
    int 21h
    call ReadDigit
    dec al
    mov bl, al
    lea si, event_prices
    mov ax, [si + bx*2]
    mov [selected_event], ax

    ; Show Venues
    mov ah, 09h
    lea dx, venue
    int 21h
    lea dx, venues
    int 21h

    ; Select Venue
    mov ah, 09h
    lea dx, select_venue
    int 21h
    call ReadDigit
    dec al
    mov bl, al
    lea si, venue_prices
    mov ax, [si + bx*2]
    mov [selected_venue], ax

    ; Show Themes
    mov ah, 09h
    lea dx, theme
    int 21h
    lea dx, themes
    int 21h

    ; Select Theme
    mov ah, 09h
    lea dx, select_theme
    int 21h
    call ReadDigit
    dec al
    mov bl, al
    lea si, theme_prices
    mov ax, [si + bx*2]
    mov [selected_theme], ax

    ; Enter Date
    mov ah, 09h
    lea dx, day
    int 21h
    call Read2Digit
    mov [event_day], ax

    mov ah, 09h
    lea dx, month
    int 21h
    call Read2Digit
    mov [event_month], ax

    mov ah, 09h
    lea dx, year
    int 21h
    call Read4Digit
    mov [event_year], ax

GetGuest:
    mov ah, 09h
    lea dx, guest
    int 21h
    call Read2Digit
    cmp ax, 10
    jl GetGuest
    cmp ax, 99
    jg GetGuest
    mov [guest_count], ax

    ; Base cost
    mov ax, [selected_event]
    add ax, [selected_venue]
    add ax, [selected_theme]
    mov [total_cost], ax

; ----- ADD-ONS -----
AddonLoop:
    mov ah, 09h
    lea dx, addon
    int 21h
    lea dx, addon_menu
    int 21h

    call ReadDigit
    cmp al, '1'
    je AddLiveMusic
    cmp al, '2'
    je AddPhoto
    cmp al, '3'
    je AddCatering
    jmp CheckAnother

AddLiveMusic:
    add [total_payment], 10000
    jmp CheckAnother

AddPhoto:
    add [total_payment], 17000
    jmp CheckAnother

AddCatering:
    mov ah, 09h
    lea dx, catering
    int 21h
    call ReadDigit
    cmp al, '1'
    je StandardCatering
    cmp al, '2'
    je PremiumCatering
    jmp CheckAnother

StandardCatering:
    mov ax, [guest_count]
    mov bx, 1500
    mul bx
    add [total_payment], ax
    jmp CheckAnother

PremiumCatering:
    mov ax, [guest_count]
    mov bx, 2500
    mul bx
    add [total_cost], ax

CheckAnother:
    mov ah, 09h
    lea dx, another_addon
    int 21h
    mov ah, 01h
    int 21h
    cmp al, 'Y'
    je AddonLoop
    cmp al, 'y'
    je AddonLoop

    ; Add to grand total
    mov ax, [total_payment]
    add [grand_total], ax

    ; Book another event?
    mov ah, 09h
    lea dx, book_another
    int 21h
    mov ah, 01h
    int 21h
    cmp al, 'Y'
    je BookingLoop
    cmp al, 'y'
    je BookingLoop
    cmp al,'n'
    je start_login
    cmp al,'N'
    je start_login

    ; Final Output
    mov ah, 09h
    lea dx, total_cost_msg
    int 21h
    mov ax, [grand_total]
    call PrintNumber

    ; Exit
    mov ah, 4ch
    int 21h



ReadDigit PROC
    mov ah, 01h
    int 21h
    ret
ReadDigit ENDP

Read2Digit PROC
    mov ah, 01h
    int 21h
    sub al, '0'
    mov ah, 0
    mov bx, 10
    mul bx
    mov cx, ax
    mov ah, 01h
    int 21h
    sub al, '0'
    mov ah, 0
    add ax, cx
    ret
Read2Digit ENDP

Read4Digit PROC
    mov ax, 0
    mov cx, 0

    ; Thousands
    mov ah, 01h
    int 21h
    sub al, '0'
    mov ah, 0
    mov bx, 1000
    mul bx
    mov cx, ax

    ; Hundreds
    mov ah, 01h
    int 21h
    sub al, '0'
    mov ah, 0
    mov bx, 100
    mul bx
    add cx, ax

    ; Tens
    mov ah, 01h
    int 21h
    sub al, '0'
    mov ah, 0
    mov bx, 10
    mul bx
    add cx, ax

    ; Units
    mov ah, 01h
    int 21h
    sub al, '0'
    mov ah, 0
    add cx, ax

    mov ax, cx
    ret
Read4Digit ENDP

PrintNumber PROC
    push ax
    push bx
    push cx
    push dx
    mov cx, 0
    mov bx, 10

ConvLoop:
    xor dx, dx
    div bx
    push dx
    inc cx
    test ax, ax
    jnz ConvLoop

PrintLoop:
    pop dx
    add dl, '0'
    mov ah, 02h
    int 21h
    loop PrintLoop

    pop dx
    pop cx
    pop bx
    pop ax
    ret

  
Start_room_service:
        mov ah, 0
    mov al, 3
    int 10h

    ; print services
    mov ah, 09h
    lea dx, menu
    int 21h

    ; input choice
    mov ah, 09h
    lea dx, input_msg
    int 21h

    mov ah, 01h
    int 21h
    sub al, '0'
    mov bl, al

    cmp bl, 1
    je do_housekeeping
    cmp bl, 2
    je do_dining
    cmp bl, 3
    je do_wellness
    cmp bl, 4
    je do_spa
    jmp after_service

do_housekeeping:
ask_hk:
    mov ah, 09h
    lea dx, ask_hk_type   ; Ask housekeeping type
    int 21h

    mov ah, 01h           ; Get input
    int 21h
    cmp al, 'D'
    je do_designated
    cmp al, 'N'
    je do_normal
    jmp ask_hk            ; invalid input, ask again

do_designated:
    mov ah, 09h
    lea dx, hk_info       ; Show assigned housekeeper info
    int 21h

do_normal:
    mov ax, 1000
    mov temp_cost, ax
    jmp after_service

do_dining:
    mov ah, 09h
    lea dx, ask_food
    int 21h
    mov ah, 01h
    int 21h
    cmp al, 'A'
    je food_A
    cmp al, 'B'
    je food_B
    cmp al, 'C'
    je food_C
    jmp after_service

food_A:
    mov ax, 500
    mov temp_cost, ax
    jmp after_service
food_B:
    mov ax, 1000
    mov temp_cost, ax
    jmp after_service
food_C:
    mov ax, 1500
    mov temp_cost, ax
    jmp after_service

do_wellness:
    mov ah, 09h
    lea dx, ask_days
    int 21h
    mov ah, 01h
    int 21h
    sub al, '0'
    mov ah, 0
    mov bx, ax
    mov ax, 2000
    mul bx
    mov temp_cost, ax
    jmp after_service

do_spa:
    mov ah, 09h
    lea dx, ask_hours
    int 21h
    mov ah, 01h
    int 21h
    sub al, '0'
    mov ah, 0
    mov bx, ax
    mov ax, 3000
    mul bx
    mov temp_cost, ax
    jmp after_service

after_service:
    ; show time slots
    mov ah, 09h
    lea dx, time_slots
    int 21h
    lea dx, ask_time
    int 21h

    ; input time
    mov ah, 01h
    int 21h

    ; update total cost
    mov ax, total_cost
    add ax, temp_cost
    mov total_cost, ax

    ; print summary
    mov ah, 09h
    lea dx, summary_msg
    int 21h

    mov ax, total_cost
    jmp print_num

after_print_number:
    ; ask for another
    mov ah, 09h
    lea dx, ask_continue
    int 21h

    mov ah, 01h
    int 21h
    cmp al, 'Y'
    je Start_room_service
    cmp al,'N'
    je Home_page

    ; exit
    mov ah, 4ch
    int 21h

; Print AX 
print_number:
    push ax
    push bx
    push cx
    push dx
    mov cx, 0
    mov bx, 10

pn_next:
    xor dx, dx
    div bx
    push dx
    inc cx
    test ax, ax
    jnz pn_next

pn_print:
    pop dx
    add dl, '0'
    mov ah, 02h
    int 21h
    loop pn_print

    pop dx
    pop cx
    pop bx
    pop ax
    jmp after_print_number
store_guest_info proc
    push ax
    push bx
    push cx
    push dx
    push si
    push di
    
    ; Calculate offset for the new guest
    ; Each guest record is 25 bytes
    mov ax, current_id
    dec ax              ; Convert to 0-based index
    mov cx, 25
    mul cx              ; AX = offset in guest_data
    
    lea di, guest_data
    add di, ax          ; DI now points to the guest record
    
    ; Store name (copy from name_array to guest_data)
    lea si, name_array
    mov cx, 21          ; Max name length + terminator
    rep movsb
    
    ; Store ID (2 bytes)
    mov ax, current_id
    stosw
    
    ; Store bill amount (2 bytes)
    mov ax, bx         ; Bill amount was stored in BX
    stosw
    
    pop di
    pop si
    pop dx
    pop cx
    pop bx
    pop ax
    ret
store_guest_info endp


end main
