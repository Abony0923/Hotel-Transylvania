; Professional Restaurant Reservation System (EMU8086 Compatible)
.model small
.stack 100h
.data
    ; ----- PROMPTS AND MESSAGES -----
    guest_prompt db 'Enter Guest ID (1-99): $'
    res_prompt db 13,10,'Enter reservation date (DD/MM/YY): $'
    meal_prompt db 13,10,'Choose Meal Time:',13,10,' B - Breakfast (6AM-10AM)',13,10,' L - Lunch (12PM-3PM)',13,10,' D - Dinner (7PM-10PM)',13,10,'Your choice: $'

    cuisine_prompt_b db 13,10,'Choose Breakfast Cuisine:',13,10,' 1. Bengali - 150 Taka',13,10,' 2. English - 200 Taka',13,10,'Your choice: $'
    cuisine_prompt_ld db 13,10,'Choose Cuisine for Lunch/Dinner:',13,10,' 1. Bengali - 300 Taka',13,10,' 2. Chinese - 400 Taka',13,10,' 3. Middle Eastern - 500 Taka',13,10,'Your choice: $'

    person_prompt db 13,10,'Enter number of people: $'
    another_prompt db 13,10,'Reserve another meal for the same day? (Y/N): $'
    add_msg db 13,10,'Meal added to bill.$'
    error_msg db 13,10,'Invalid input!$'
    final_msg db 13,10,'Total bill: $'

    ; ----- STORAGE -----
    res_day db ?
    res_month db ?
    res_year db ?

    guest_id db ?
    meal_type db ?
    cuisine_choice db ?
    num_people db ?
    total_bill dw 0
    input_buf db 3 dup(?)

.code
.startup

; -------- GET GUEST ID --------
    mov ah, 09h
    lea dx, guest_prompt
    int 21h
    call read_two_digit
    mov guest_id, bl

RESERVE_LOOP:

; -------- GET RESERVATION DATE --------
    mov ah, 09h
    lea dx, res_prompt
    int 21h
    call read_date
    mov res_day, al
    mov res_month, ah
    mov res_year, bl

; -------- GET MEAL TIME --------
    mov ah, 09h
    lea dx, meal_prompt
    int 21h
    mov ah, 01h
    int 21h
    mov meal_type, al

    cmp al, 'B'
    je CUISINE_B
    cmp al, 'L'
    je CUISINE_LD
    cmp al, 'D'
    je CUISINE_LD
    jmp INVALID_DATE

CUISINE_B:
    mov ah, 09h
    lea dx, cuisine_prompt_b
    int 21h
    mov ah, 01h
    int 21h
    sub al, '0'
    cmp al, 1
    jb INVALID_DATE
    cmp al, 2
    ja INVALID_DATE
    mov cuisine_choice, al
    jmp GET_PEOPLE

CUISINE_LD:
    mov ah, 09h
    lea dx, cuisine_prompt_ld
    int 21h
    mov ah, 01h
    int 21h
    sub al, '0'
    cmp al, 1
    jb INVALID_DATE
    cmp al, 3
    ja INVALID_DATE
    mov cuisine_choice, al
    jmp GET_PEOPLE

GET_PEOPLE:
    mov ah, 09h
    lea dx, person_prompt
    int 21h
    call read_digit
    mov num_people, al
    call calculate_price

    ; Ask if reserve again
    mov ah, 09h
    lea dx, another_prompt
    int 21h
    mov ah, 01h
    int 21h
    cmp al, 'Y'
    je RESERVE_LOOP

; -------- PRINT FINAL BILL --------
    mov ah, 09h
    lea dx, final_msg
    int 21h
    mov ax, total_bill
    call print_number
    jmp DONE

INVALID_DATE:
    mov ah, 09h
    lea dx, error_msg
    int 21h

DONE:
    mov ax, 4C00h
    int 21h

; -------- SUBROUTINES --------

read_date proc
    call read_two_digit
    mov al, bl
    mov ah, 01h
    int 21h
    call read_two_digit
    mov ah, bl
    mov ah, 01h
    int 21h
    call read_two_digit
    mov bl, bl
    ret
read_date endp

read_two_digit proc
    mov ah, 01h
    int 21h
    sub al, '0'
    mov bh, al
    mov ah, 01h
    int 21h
    sub al, '0'
    mov bl, al
    mov al, bh
    mov ah, 0
    mov cx, 10
    mul cx
    add al, bl
    mov bl, al
    ret
read_two_digit endp

read_digit proc
    mov ah, 01h
    int 21h
    sub al, '0'
    ret
read_digit endp

calculate_price proc
    mov al, meal_type
    cmp al, 'B'
    je CALC_B

; L or D
    cmp cuisine_choice, 1
    je L_BENGALI
    cmp cuisine_choice, 2
    je L_CHINESE
    cmp cuisine_choice, 3
    je L_ME
    jmp DONE

CALC_B:
    cmp cuisine_choice, 1
    je B_BENGALI
    cmp cuisine_choice, 2
    je B_ENGLISH
    jmp DONE

B_BENGALI:
    mov ax, 150
    jmp MULTI
B_ENGLISH:
    mov ax, 200
    jmp MULTI
L_BENGALI:
    mov ax, 300
    jmp MULTI
L_CHINESE:
    mov ax, 400
    jmp MULTI
L_ME:
    mov ax, 500

MULTI:
    mov bl, num_people
    mul bl
    add total_bill, ax
    mov ah, 09h
    lea dx, add_msg
    int 21h
    ret
calculate_price endp

print_number proc
    mov cx, 0
    mov bx, 10
print_loop:
    xor dx, dx
    div bx
    push dx
    inc cx
    cmp ax, 0
    jne print_loop
print_digits:
    pop dx
    add dl, '0'
    mov ah, 02h
    int 21h
    loop print_digits
    ret
print_number endp

end
